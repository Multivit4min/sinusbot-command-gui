{"version":3,"sources":["app/redux/command/types.ts","app/components/TextComponent.tsx","app/components/CodeComponent.tsx","app/components/CheckBoxComponent.tsx","app/components/DynamicListComponent/ListSelect.tsx","app/components/DynamicListComponent/index.tsx","app/redux/command/actions.ts","app/redux/command/reducers.ts","app/redux/index.ts","app/components/ArgumentComponent/Argument.tsx","app/components/ArgumentComponent/StringArgument.tsx","app/components/ArgumentComponent/NumberArgument.tsx","app/fields.tsx","app/preview/man.tsx","app/preview/help.tsx","app/index.tsx","serviceWorker.ts","index.tsx"],"names":["COMMAND","ArgumentType","TextComponent","config","hasConfig","hasCode","valueCallback","changeCallback","isValidCallback","displayCodeCallback","renderCodeCallback","icon","label","multiline","this","getValue","onChange","isValid","displayCode","renderCode","event","key","Grid","container","spacing","alignItems","item","TextField","value","error","CodeComponent","CheckBoxComponent","FormControlLabel","control","Checkbox","checked","color","ListSelect","props","handleOpen","setState","open","handleClose","submit","selected","state","onSelect","listItems","includes","handleChange","target","classes","Button","onClick","Dialog","onClose","DialogContent","className","FormControl","formControl","InputLabel","htmlFor","Select","native","input","Input","id","map","i","DialogActions","Component","withStyles","createStyles","display","flexWrap","margin","minWidth","DynamicListComponent","onSelectCallback","elements","selectItem","element","push","filter","el","Object","keys","renderConfigField","length","join","addArgument","argument","type","ADDARGUMENT","COMMAND_INITIAL","argId","name","help","manual","checkPerm","prefix","rootReducer","combineReducers","command","action","RESET","SETNAME","SETHELP","SETMANUAL","CHECKPERMISSION","check","DELETEARGUMENT","arg","UPDATEARGUMENT","UPDATEPREFIX","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","Argument","parent","dispatch","getState","find","Error","removeElement","getArgument","update","optional","displayDefault","def","default","getName","updateName","test","getOptional","updateOptional","initial","code","getDisplay","undefined","StringArgument","STRING","regex","maxlen","minlen","whitelist","uppercase","args","lowercase","renderBasicCode","getUpperCase","getLowerCase","ExpansionPanel","ExpansionPanelSummary","expandIcon","Typography","ExpansionPanelDetails","renderBasicConfig","updateUpperCase","updateLowerCase","ExpansionPanelActions","size","removeArgument","NumberArgument","NUMBER","int","forcePositive","forceNegative","getInt","getForcePositive","getForceNegative","updateInt","updateForcePositive","updateForceNegative","fields","field","split","m","list","addElement","create","ManPreview","res","argumentUsage","variant","getUsage","HelpPreview","getHelp","CommandBuilder","copyCode","document","createElement","setAttribute","style","position","left","body","appendChild","select","execCommand","removeChild","content","sm","md","lg","IconButton","connect","flexGrow","padding","height","overflow","whiteSpace","Boolean","location","hostname","match","theme","createMuiTheme","palette","ReactDOM","render","CssBaseline","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bab09047.chunk.js","sourcesContent":["export enum COMMAND {\n  RESET = \"COMMAND/RESET\",\n  SETNAME = \"COMMAND/SETNAME\",\n  SETHELP = \"COMMAND/SETHELP\",\n  CHECKPERMISSION = \"COMMAND/CHECKPERMISSION\",\n  ADDARGUMENT = \"COMMAND/ADDARGUMENT\",\n  DELETEARGUMENT = \"COMMAND/DELETEARGUMENT\",\n  UPDATEARGUMENT = \"COMMAND/UPDATEARGUMENT\",\n  SETMANUAL = \"COMMAND/SETMANUAL\",\n  UPDATEPREFIX = \"COMMAND/UPDATEPREFIX\"\n}\n\nexport interface SetNameAction {\n  type: COMMAND.SETNAME\n  name: string\n}\n\nexport interface SetHelpAction {\n  type: typeof COMMAND.SETHELP\n  help: string\n}\n\nexport interface SetManualAction {\n  type: typeof COMMAND.SETMANUAL\n  manual: string\n}\n\nexport interface CheckPermissionAction {\n  type: typeof COMMAND.CHECKPERMISSION\n  check: boolean\n}\n\nexport interface AddArgumentAction {\n  type: typeof COMMAND.ADDARGUMENT\n  argument: Arguments\n}\n\nexport interface DeleteArgumentAction {\n  type: typeof COMMAND.DELETEARGUMENT\n  id: number\n}\n\nexport interface UpdateArgumentAction {\n  type: typeof COMMAND.UPDATEARGUMENT\n  id: number\n  argument: Partial<Arguments>\n}\n\nexport interface UpdatePrefixAction {\n  type: typeof COMMAND.UPDATEPREFIX\n  prefix: string\n}\n\nexport interface ResetAction {\n  type: typeof COMMAND.RESET\n}\n\nexport type CommandActionTypes =\n  SetNameAction              |\n  SetHelpAction              |\n  SetManualAction            |\n  CheckPermissionAction      |\n  AddArgumentAction          |\n  DeleteArgumentAction       |\n  UpdateArgumentAction       |\n  UpdatePrefixAction         |\n  ResetAction\n\n/** Arguments */\nexport type Arguments = \n  StringArgument             |\n  NumberArgument             |\n  ClientArgument             |\n  RestArgument\n\nexport enum ArgumentType {\n  STRING,\n  NUMBER,\n  CLIENT,\n  REST\n}\n\nexport interface Argument {\n  id: number\n  type: ArgumentType\n  optional: boolean\n  name: string\n  display: string\n  displayDefault: boolean\n  default: any\n}\n\nexport interface StringArgument extends Argument {\n  type: typeof ArgumentType.STRING\n  regex?: RegExp\n  maxlen?: number\n  minlen?: number\n  whitelist?: string[]\n  uppercase: boolean\n  lowercase: boolean\n}\n\nexport interface NumberArgument extends Argument {\n  type: typeof ArgumentType.NUMBER\n  min?: number\n  max?: number\n  int: boolean\n  forcePositive: boolean\n  forceNegative: boolean\n}\n\nexport interface ClientArgument extends Argument {\n  type: typeof ArgumentType.CLIENT\n}\n\nexport interface RestArgument extends Omit<StringArgument, \"type\"> {\n  type: typeof ArgumentType.REST\n}\n\n/** Store State */\nexport interface CommandState {\n  argId: number\n  name: string\n  help: string\n  manual: string\n  checkPerm: boolean\n  argument: Arguments[],\n  prefix: string\n}","import React from \"react\"\nimport Grid from \"@material-ui/core/Grid\"\nimport TextField from \"@material-ui/core/TextField\"\n\nimport { ConfigInterface, CodeInterface } from \"./Abstract\"\n\nexport interface TextComponentConfig {\n  getValue: (component: TextComponent) => string\n  onChange: (component: TextComponent, event: React.ChangeEvent<any>) => void\n  isValid?: (component: TextComponent) => boolean\n  displayCode?: (component: TextComponent) => boolean\n  renderCode: (component: TextComponent) => string\n  icon: JSX.Element\n  label: string\n  multiline?: boolean\n}\n\nexport class TextComponent implements ConfigInterface, CodeInterface {\n\n  readonly hasConfig = true\n  readonly hasCode = true\n  private valueCallback: (component: TextComponent) => string\n  private changeCallback: (component: TextComponent, event: React.ChangeEvent<any>) => void\n  private isValidCallback: (component: TextComponent) => boolean\n  private displayCodeCallback: (component: TextComponent) => boolean\n  private renderCodeCallback: (component: TextComponent) => string\n  private icon: JSX.Element\n  private label: string\n  private multiline: boolean\n\n  constructor(config: TextComponentConfig) {\n    this.valueCallback = config.getValue\n    this.changeCallback = config.onChange\n    this.isValidCallback = config.isValid || (() => true)\n    this.displayCodeCallback = config.displayCode || (() => true)\n    this.renderCodeCallback = config.renderCode\n    this.icon = config.icon\n    this.label = config.label\n    this.multiline = config.multiline || false\n  }\n\n  private onChange(event: React.ChangeEvent<any>) {\n    return this.changeCallback(this, event)\n  }\n\n  getValue() {\n    return this.valueCallback(this)\n  }\n\n  isValid() {\n    return this.isValidCallback(this)\n  }\n\n  displayCode() {\n    return this.displayCodeCallback(this)\n  }\n\n  renderCode() {\n    return this.renderCodeCallback(this)\n  }\n\n  renderConfigField(key?: number) {\n    return (\n      <Grid key={key} container spacing={1} alignItems=\"flex-end\">\n        <Grid item>\n          {this.icon}\n        </Grid>\n        <Grid item>\n          <TextField\n            label={this.label}\n            value={this.getValue()}\n            multiline={this.multiline}\n            error={!this.isValid()}\n            onChange={event => this.onChange(event)}\n          />\n        </Grid>\n      </Grid>\n    )\n  }\n\n}","import { CodeInterface } from \"./Abstract\"\n\nexport interface CodeComponentConfig {\n  displayCode?: (component: CodeComponent) => boolean\n  renderCode: (component: CodeComponent) => string\n}\n\nexport class CodeComponent implements CodeInterface {\n\n  readonly hasConfig = false\n  readonly hasCode = true\n  private displayCodeCallback: (component: CodeComponent) => boolean\n  private renderCodeCallback: (component: CodeComponent) => string\n\n  constructor(config: CodeComponentConfig) {\n    this.displayCodeCallback = config.displayCode || (() => true)\n    this.renderCodeCallback = config.renderCode\n  }\n\n  displayCode() {\n    return this.displayCodeCallback(this)\n  }\n\n  renderCode() {\n    return this.renderCodeCallback(this)\n  }\n\n}","import React from \"react\"\nimport Grid from \"@material-ui/core/Grid\"\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\"\nimport Checkbox from \"@material-ui/core/Checkbox\"\n\nimport { ConfigInterface, CodeInterface } from \"./Abstract\"\n\nexport interface CheckBoxComponentConfig {\n  getValue: (component: CheckBoxComponent) => boolean\n  onChange: (component: CheckBoxComponent, event: React.ChangeEvent<any>) => void\n  displayCode?: (component: CheckBoxComponent) => boolean\n  renderCode: (component: CheckBoxComponent) => string\n  icon: JSX.Element\n  label: string\n}\n\nexport class CheckBoxComponent implements ConfigInterface, CodeInterface {\n\n  readonly hasConfig = true\n  readonly hasCode = true\n  private valueCallback: (component: CheckBoxComponent) => boolean\n  private changeCallback: (component: CheckBoxComponent, event: React.ChangeEvent<any>) => void\n  private displayCodeCallback: (component: CheckBoxComponent) => boolean\n  private renderCodeCallback: (component: CheckBoxComponent) => string\n  private icon: JSX.Element\n  private label: string\n\n  constructor(config: CheckBoxComponentConfig) {\n    this.valueCallback = config.getValue\n    this.changeCallback = config.onChange\n    this.displayCodeCallback = config.displayCode || (() => true)\n    this.renderCodeCallback = config.renderCode\n    this.icon = config.icon\n    this.label = config.label\n  }\n\n  private onChange(event: React.ChangeEvent<any>) {\n    return this.changeCallback(this, event)\n  }\n\n  getValue() {\n    return this.valueCallback(this)\n  }\n\n  displayCode() {\n    return this.displayCodeCallback(this)\n  }\n\n  renderCode() {\n    return this.renderCodeCallback(this)\n  }\n\n  renderConfigField() {\n    return (\n      <Grid container spacing={1} alignItems=\"flex-end\">\n        <Grid item>\n          {this.icon}\n        </Grid>\n        <Grid item>\n          <FormControlLabel\n            control={\n              <Checkbox\n                checked={this.getValue()}\n                onChange={event => this.onChange(event)}\n                color=\"primary\"\n              />\n            }\n            label={this.label}\n          />\n        </Grid>\n      </Grid>\n    )\n  }\n\n}","import React, { Component } from \"react\"\n\nimport { withStyles, createStyles, Theme } from \"@material-ui/core/styles\"\nimport Grid from \"@material-ui/core/Grid\"\nimport Button from \"@material-ui/core/Button\"\nimport Dialog from \"@material-ui/core/Dialog\"\nimport DialogActions from \"@material-ui/core/DialogActions\"\nimport DialogContent from \"@material-ui/core/DialogContent\"\nimport InputLabel from \"@material-ui/core/InputLabel\"\nimport Input from \"@material-ui/core/Input\"\nimport FormControl from \"@material-ui/core/FormControl\"\nimport Select from \"@material-ui/core/Select\"\n\nconst styles = ({ spacing }: Theme) => createStyles({\n  container: {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n  },\n  formControl: {\n    margin: spacing(1),\n    minWidth: 120,\n  },\n})\n\ninterface IState {\n  open: boolean\n  selected: string\n}\n\ninterface IProps {\n  classes: Record<string, string>\n  icon: JSX.Element\n  label: string\n  listItems: string[]\n  onSelect: (item: string) => void\n}\n\nclass ListSelect extends Component<IProps, IState> {\n\n  constructor(props: Readonly<IProps>) {\n    super(props)\n    this.state = {\n      selected: \"\",\n      open: false\n    }\n  }\n\n  handleOpen = () => {\n    this.setState({ open: true })\n  }\n\n  handleClose = (submit: boolean = false) => () => {\n    const { selected } = this.state\n    const { onSelect, listItems } = this.props\n    if (submit && listItems.includes(selected)) onSelect(selected)\n    this.setState({ open: false, selected: \"\" })\n  }\n\n  handleChange = (event: React.ChangeEvent<any>) => {\n    this.setState({ selected: event.target.value || \"\" })\n  }\n\n  render() {\n    const { open, selected } = this.state\n    const { classes, label, icon, listItems } = this.props\n\n    return (\n      <Grid container spacing={1} alignItems=\"flex-end\">\n        <Grid item>\n          {icon}\n        </Grid>\n        <Grid item>\n          <Button onClick={this.handleOpen}>{label}</Button>\n          <Dialog open={open} onClose={this.handleClose(false)}>\n            <DialogContent>\n              <form className={classes.container}>\n                <FormControl className={classes.formControl}>\n                  <InputLabel htmlFor=\"demo-dialog-native\">{label}</InputLabel>\n                  <Select\n                    native\n                    value={selected}\n                    onChange={this.handleChange}\n                    input={<Input id=\"demo-dialog-native\" />}\n                  >\n                    <option value=\"\" />\n                    {listItems.map((item, i) => <option key={i} value={item}>{item}</option>)}\n                  </Select>\n                </FormControl>\n              </form>\n            </DialogContent>\n            <DialogActions>\n              <Button onClick={this.handleClose(false)} color=\"primary\">\n                Cancel\n              </Button>\n              <Button onClick={this.handleClose(true)} color=\"primary\">\n                Ok\n              </Button>\n            </DialogActions>\n          </Dialog>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\n\nexport default withStyles(styles)(ListSelect)","import React from \"react\"\nimport { CommandType } from \"../Abstract\"\nimport ListSelect from \"./ListSelect\"\n\nexport interface DynamicListComponentConfig<T, Y extends CommandType> {\n  icon: JSX.Element\n  label: string\n  listItems: Record<string, any>\n  onSelect: (list: DynamicListComponent<T, Y>, element: T) => void\n}\n\nexport class DynamicListComponent<T, Y extends CommandType> implements CommandType {\n\n  readonly hasConfig = true\n  readonly hasCode = true\n  private icon: JSX.Element\n  private label: string\n  private listItems: Record<string, T>\n  private onSelectCallback: (list: DynamicListComponent<T, Y>, element: T) => void\n  private elements: Y[] = []\n\n  constructor(config: DynamicListComponentConfig<T, Y>) {\n    this.icon = config.icon\n    this.label = config.label\n    this.listItems = config.listItems\n    this.onSelectCallback = config.onSelect\n  }\n\n  selectItem = (item: string) => {\n    return this.onSelectCallback(this, this.listItems[item])\n  }\n\n  addElement(element: Y) {\n    this.elements.push(element)\n  }\n  \n  removeElement(element: Y) {\n    this.elements = this.elements.filter(el => el !== element)\n    return this\n  }\n\n  renderConfigField() {\n    return (\n      <>\n        <ListSelect\n          label={this.label}\n          icon={this.icon}\n          listItems={Object.keys(this.listItems)}\n          onSelect={this.selectItem}\n        />\n        {this.elements.map(element => element.hasConfig ? element.renderConfigField() : null)}\n      </>\n    )\n  }\n\n  displayCode() {\n    return this.elements.length > 0\n  }\n\n  renderCode() {\n    return `${this.elements.map(el => el.renderCode()).join(\"\\n\")}\\n`\n  }\n\n}","import { COMMAND, CommandActionTypes, Arguments } from \"./types\"\n\nexport function reset() {\n  return {\n    type: COMMAND.RESET\n  }\n}\n\nexport function setName(name: string): CommandActionTypes {\n  return {\n    type: COMMAND.SETNAME, name\n  }\n}\n\nexport function setHelp(help: string): CommandActionTypes {\n  return {\n    type: COMMAND.SETHELP, help\n  }\n}\n\nexport function checkPermission(check: boolean): CommandActionTypes {\n  return {\n    type: COMMAND.CHECKPERMISSION, check\n  }\n}\n\nexport function setManual(manual: string): CommandActionTypes {\n  return {\n    type: COMMAND.SETMANUAL, manual\n  }\n}\n\nexport function addArgument(argument: Arguments): CommandActionTypes {\n  return {\n    type: COMMAND.ADDARGUMENT, argument\n  }\n}\n\nexport function deleteArgument(id: number): CommandActionTypes {\n  return {\n    type: COMMAND.DELETEARGUMENT, id\n  }\n}\n\nexport function updateArgument(id: number, argument: Partial<Arguments>): CommandActionTypes {\n  return {\n    type: COMMAND.UPDATEARGUMENT, id, argument\n  }\n}\n\nexport function setPrefix(prefix: string): CommandActionTypes {\n  return {\n    type: COMMAND.UPDATEPREFIX, prefix\n  }\n}","import { COMMAND, CommandActionTypes, CommandState } from \"./types\"\n\nconst COMMAND_INITIAL: CommandState = {\n  argId: 0,\n  name: \"ping\",\n  help: \"responds with pong!\",\n  manual: \"manual text\",\n  checkPerm: false,\n  argument: [],\n  prefix: \"!\"\n}\n\nexport function reducer(\n  state = {...COMMAND_INITIAL},\n  action: CommandActionTypes\n): CommandState {\n  switch (action.type) {\n\n    case COMMAND.RESET:\n      return { ...COMMAND_INITIAL }\n\n    case COMMAND.SETNAME:\n      return {\n        ...state,\n        name: action.name\n      }\n\n    case COMMAND.SETHELP:\n      return {\n        ...state,\n        help: action.help\n      }\n\n    case COMMAND.SETMANUAL:\n      return {\n        ...state,\n        manual: action.manual\n      }\n\n    case COMMAND.CHECKPERMISSION:\n      return {\n        ...state,\n        checkPerm: action.check\n      }\n\n    case COMMAND.ADDARGUMENT:\n      return {\n        ...state,\n        argId: state.argId + 1,\n        argument: [...state.argument, { ...action.argument }]\n      }\n\n    case COMMAND.DELETEARGUMENT:\n      return {\n        ...state,\n        argument: state.argument.filter(arg => arg.id !== action.id)\n      }\n\n    case COMMAND.UPDATEARGUMENT:\n      return {\n        ...state,\n        //@ts-ignore\n        argument: state.argument.map(arg => {\n          if (arg.id !== action.id) return arg\n          return { ...arg, ...action.argument }\n        })\n      } \n\n    case COMMAND.UPDATEPREFIX:\n      return {\n        ...state,\n        prefix: action.prefix === \"\" ? COMMAND_INITIAL.prefix : action.prefix\n      }                               \n\n    default:\n      return state\n  }\n}","import { createStore, combineReducers } from \"redux\"\nimport { reducer as commandReducer } from \"./command/reducers\"\n\nconst rootReducer = combineReducers({\n  command: commandReducer\n})\n\nexport const store = createStore(\n  rootReducer,\n  //@ts-ignore\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n)\n\nexport type AppState = ReturnType<typeof rootReducer>","import React from \"react\"\nimport { updateArgument, deleteArgument } from \"../../redux/command/actions\"\nimport { store } from \"../../redux\"\nimport { Arguments, ArgumentType } from \"../../redux/command/types\"\nimport { CommandType } from \"../Abstract\"\nimport LabelIcon from \"@material-ui/icons/Label\"\nimport PlaylistAddIcon from \"@material-ui/icons/PlaylistAdd\"\nimport Grid from \"@material-ui/core/Grid\"\nimport TextField from \"@material-ui/core/TextField\"\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\"\nimport Checkbox from \"@material-ui/core/Checkbox\"\nimport { DynamicListComponent } from \"../DynamicListComponent\"\n\nexport abstract class Argument<T extends Arguments> implements CommandType {\n  readonly id: number\n  readonly type: ArgumentType\n  readonly parent: DynamicListComponent<any, any>\n\n  readonly hasCode = true\n  readonly hasConfig = true\n\n  abstract renderConfigField(key?: number): JSX.Element\n  abstract renderCode(): string\n  abstract displayCode(): boolean\n\n  constructor(id: number, type: ArgumentType, parent: DynamicListComponent<any, any>) {\n    this.id = id\n    this.type = type\n    this.parent = parent\n  }\n\n  static initial(id: number) {\n    return {\n      id,\n      name: \"_\",\n      optional: false,\n      display: \"\",\n      displayDefault: false,\n      default: undefined\n    }\n  }\n\n  protected update(arg: Partial<Arguments>) {\n    return store.dispatch(updateArgument(this.id, arg))\n  }\n\n  protected getArgument(): T {\n    const arg = store.getState().command.argument.find(arg => (\n      arg.id === this.id && arg.type === this.type\n    )) as T|undefined\n    if (!arg) throw new Error(`argument with id ${this.id} not found`)\n    return arg\n  }\n\n  removeArgument() {\n    this.parent.removeElement(this)\n    return store.dispatch(deleteArgument(this.id))\n  }\n\n  getType() {\n    return this.getArgument().type\n  }\n\n  updateName(name: string) {\n    return this.update({ name })\n  }\n\n  getName() {\n    return this.getArgument().name\n  }\n\n  updateOptional(optional: boolean) {\n    return this.update({ optional })\n  }\n\n  getOptional() {\n    return this.getArgument().optional\n  }\n\n  updateDisplay(display: string) {\n    return this.update({ display })\n  }\n\n  getDisplay() {\n    return this.getArgument().display\n  }\n\n  updateDisplayDefault(displayDefault: boolean) {\n    return this.update({ displayDefault })\n  }\n\n  getDisplayDefault() {\n    return this.getArgument().displayDefault\n  }\n\n  updateDefault(def: any) {\n    return this.update({ default: def })\n  }\n\n  getDefault() {\n    return this.getArgument().default\n  }\n\n  renderBasicConfig() {\n    return (\n      <div>\n        <Grid container spacing={1} alignItems=\"flex-end\">\n          <Grid item>\n            <LabelIcon />\n          </Grid>\n          <Grid item>\n            <TextField\n              label={\"name\"}\n              value={this.getName()}\n              onChange={event => this.updateName(event.target.value)}\n              error={(/\\s/).test(this.getName())}\n            />\n          </Grid>\n        </Grid>\n        <Grid container spacing={1} alignItems=\"flex-end\">\n          <Grid item>\n            <PlaylistAddIcon />\n          </Grid>\n          <Grid item>\n            <FormControlLabel\n              control={\n                <Checkbox\n                  checked={this.getOptional()}\n                  onChange={event => this.updateOptional(event.target.checked)}\n                  color=\"primary\"\n                />\n              }\n              label=\"is optional?\"\n            />\n          </Grid>\n        </Grid>\n      </div>\n    )\n  }\n\n  renderBasicCode() {\n    const initial = Argument.initial(0)\n    let code = \"\"\n    if (this.getName() !== initial.name)\n      code += `.setName(\"${this.getName()}\"${this.getDisplay() !== initial.display ? `, \"${this.getDisplay()}\"` : \"\"})`\n    if (this.getOptional() !== initial.optional)\n      code += `.isOptional()`\n    return code\n  }\n\n}","import React from \"react\"\nimport { Argument } from \"./Argument\"\nimport { ConfigInterface, CodeInterface } from \"../Abstract\"\nimport { ArgumentType, StringArgument as StringArg } from \"../../redux/command/types\"\nimport { store } from \"../../redux\"\nimport { addArgument } from \"../../redux/command/actions\"\nimport { DynamicListComponent } from \"../DynamicListComponent\"\n\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\"\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\"\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\"\nimport Typography from \"@material-ui/core/Typography\"\nimport ExpansionPanel from \"@material-ui/core/ExpansionPanel\"\nimport ExpansionPanelSummary from \"@material-ui/core/ExpansionPanelSummary\"\nimport ExpansionPanelDetails from \"@material-ui/core/ExpansionPanelDetails\"\nimport ExpansionPanelActions from \"@material-ui/core/ExpansionPanelActions\"\nimport Button from \"@material-ui/core/Button\"\nimport Grid from \"@material-ui/core/Grid\"\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\"\nimport Checkbox from \"@material-ui/core/Checkbox\"\n\nexport class StringArgument extends Argument<StringArg> implements ConfigInterface, CodeInterface {\n\n  readonly hasConfig = true\n  readonly hasCode = true\n\n  constructor(id: number, parent: DynamicListComponent<any, any>) {\n    super(id, ArgumentType.STRING, parent)\n  }\n\n  static create(parent: DynamicListComponent<any, any>) {\n    const id = store.getState().command.argId\n    store.dispatch(addArgument({\n      type: ArgumentType.STRING,\n      uppercase: false,\n      lowercase: false,\n      ...Argument.initial(id)\n    }))\n    return new StringArgument(id, parent)\n  }\n  \n  getRegex() {\n    return this.getArgument().regex\n  }\n\n  updateRegex(regex: RegExp) {\n    return this.update({ regex })\n  }\n  \n  getMaxLen() {\n    return this.getArgument().maxlen\n  }\n\n  updateMaxLen(maxlen: number|undefined) {\n    return this.update({ maxlen })\n  }\n  \n  getMinLen() {\n    return this.getArgument().minlen\n  }\n\n  updateMinLen(minlen: number|undefined) {\n    return this.update({ minlen })\n  }\n  \n  getWhitelist() {\n    return this.getArgument().whitelist\n  }\n\n  updateWhitelist(whitelist: string[]|undefined) {\n    return this.update({ whitelist })\n  }\n  \n  getUpperCase() {\n    return this.getArgument().uppercase\n  }\n\n  updateUpperCase(uppercase: boolean) {\n    const args: Partial<StringArg> = { uppercase }\n    if (uppercase) args.lowercase = false\n    return this.update(args)\n  }\n  \n  getLowerCase() {\n    return this.getArgument().lowercase\n  }\n\n  updateLowerCase(lowercase: boolean) {\n    const args: Partial<StringArg> = { lowercase }\n    if (lowercase) args.uppercase = false\n    return this.update(args)\n  }\n\n  displayCode() {\n    return true\n  }\n\n  renderCode() {\n    let code = `  .addArgument(arg => arg.string${this.renderBasicCode()}`\n    if (this.getUpperCase()) code += \".toUpperCase()\"\n    if (this.getLowerCase()) code += \".toLowerCase()\"\n    return `${code})`\n  }\n\n  renderConfigField() {\n    return (\n      <>\n      <ExpansionPanel>\n        <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\n          <Typography>String Argument</Typography>\n        </ExpansionPanelSummary>\n        <ExpansionPanelDetails>\n          <div>\n            {this.renderBasicConfig()}\n            <Grid container spacing={1} alignItems=\"flex-end\">\n              <Grid item>\n                <ArrowUpwardIcon />\n              </Grid>\n              <Grid item>\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      checked={this.getUpperCase()}\n                      onChange={event => this.updateUpperCase(event.target.checked)}\n                      color=\"primary\"\n                    />\n                  }\n                  label=\"To Uppercase\"\n                />\n              </Grid>\n            </Grid>\n            <Grid container spacing={1} alignItems=\"flex-end\">\n              <Grid item>\n                <ArrowDownwardIcon />\n              </Grid>\n              <Grid item>\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      checked={this.getLowerCase()}\n                      onChange={event => this.updateLowerCase(event.target.checked)}\n                      color=\"primary\"\n                    />\n                  }\n                  label=\"To Lowercase\"\n                />\n              </Grid>\n            </Grid>\n          </div>\n        </ExpansionPanelDetails>\n        <ExpansionPanelActions>\n          <Button size=\"small\" color=\"secondary\" onClick={() => this.removeArgument()} >Delete</Button>\n        </ExpansionPanelActions>\n      </ExpansionPanel>\n      </>\n    )\n  }\n}","import React from \"react\"\nimport { Argument } from \"./Argument\"\nimport { ConfigInterface, CodeInterface } from \"../Abstract\"\nimport { ArgumentType, NumberArgument as NumberArg } from \"../../redux/command/types\"\nimport { store } from \"../../redux\"\nimport { addArgument } from \"../../redux/command/actions\"\nimport { DynamicListComponent } from \"../DynamicListComponent\"\n\nimport ThumpDownIcon from \"@material-ui/icons/ThumbDown\"\nimport ThumpUpIcon from \"@material-ui/icons/ThumbUp\"\nimport FlagOutlinedIcon from \"@material-ui/icons/FlagOutlined\"\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\"\nimport Typography from \"@material-ui/core/Typography\"\nimport ExpansionPanel from \"@material-ui/core/ExpansionPanel\"\nimport ExpansionPanelSummary from \"@material-ui/core/ExpansionPanelSummary\"\nimport ExpansionPanelDetails from \"@material-ui/core/ExpansionPanelDetails\"\nimport ExpansionPanelActions from \"@material-ui/core/ExpansionPanelActions\"\nimport Button from \"@material-ui/core/Button\"\nimport Grid from \"@material-ui/core/Grid\"\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\"\nimport Checkbox from \"@material-ui/core/Checkbox\"\n\nexport class NumberArgument extends Argument<NumberArg> implements ConfigInterface, CodeInterface {\n\n  readonly hasConfig = true\n  readonly hasCode = true\n\n  constructor(id: number, parent: DynamicListComponent<any, any>) {\n    super(id, ArgumentType.NUMBER, parent)\n  }\n\n  static create(parent: DynamicListComponent<any, any>) {\n    const id = store.getState().command.argId\n    store.dispatch(addArgument({\n      type: ArgumentType.NUMBER,\n      int: false,\n      forcePositive: false,\n      forceNegative: false,\n      ...Argument.initial(id)\n    }))\n    return new NumberArgument(id, parent)\n  }\n  \n  getInt() {\n    return this.getArgument().int\n  }\n\n  updateInt(int: boolean) {\n    return this.update({ int })\n  }\n  \n  getForcePositive() {\n    return this.getArgument().forcePositive\n  }\n\n  updateForcePositive(forcePositive: boolean) {\n    const args: Partial<NumberArg> = { forcePositive }\n    if (forcePositive) args.forceNegative = false\n    return this.update(args)\n  }\n  \n  getForceNegative() {\n    return this.getArgument().forceNegative\n  }\n\n  updateForceNegative(forceNegative: boolean) {\n    const args: Partial<NumberArg> = { forceNegative }\n    if (forceNegative) args.forcePositive = false\n    return this.update(args)\n  }\n\n  displayCode() {\n    return true\n  }\n\n  renderCode() {\n    let code = `  .addArgument(arg => arg.number${this.renderBasicCode()}`\n    if (this.getInt()) code += \".integer()\"\n    if (this.getForcePositive()) code += \".forcePositive()\"\n    if (this.getForceNegative()) code += \".forceNegative()\"\n    return `${code})`\n  }\n\n  renderConfigField() {\n    return (\n      <>\n      <ExpansionPanel>\n        <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\n          <Typography>Number Argument</Typography>\n        </ExpansionPanelSummary>\n        <ExpansionPanelDetails>\n          <div>\n            {this.renderBasicConfig()}\n            <Grid container spacing={1} alignItems=\"flex-end\">\n              <Grid item>\n                <FlagOutlinedIcon />\n              </Grid>\n              <Grid item>\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      checked={this.getInt()}\n                      onChange={event => this.updateInt(event.target.checked)}\n                      color=\"primary\"\n                    />\n                  }\n                  label=\"want an integer number (whole number)\"\n                />\n              </Grid>\n            </Grid>\n            <Grid container spacing={1} alignItems=\"flex-end\">\n              <Grid item>\n                <ThumpUpIcon />\n              </Grid>\n              <Grid item>\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      checked={this.getForcePositive()}\n                      onChange={event => this.updateForcePositive(event.target.checked)}\n                      color=\"primary\"\n                    />\n                  }\n                  label=\"expect positive number\"\n                />\n              </Grid>\n            </Grid>\n            <Grid container spacing={1} alignItems=\"flex-end\">\n              <Grid item>\n                <ThumpDownIcon />\n              </Grid>\n              <Grid item>\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      checked={this.getForceNegative()}\n                      onChange={event => this.updateForceNegative(event.target.checked)}\n                      color=\"primary\"\n                    />\n                  }\n                  label=\"expect negative number\"\n                />\n              </Grid>\n            </Grid>\n          </div>\n        </ExpansionPanelDetails>\n        <ExpansionPanelActions>\n          <Button size=\"small\" color=\"secondary\" onClick={() => this.removeArgument()} >Delete</Button>\n        </ExpansionPanelActions>\n      </ExpansionPanel>\n      </>\n    )\n  }\n}","import React from \"react\"\nimport { TextComponent } from \"./components/TextComponent\"\nimport { CodeComponent } from \"./components/CodeComponent\"\nimport { CheckBoxComponent } from \"./components/CheckBoxComponent\"\nimport { DynamicListComponent } from \"./components/DynamicListComponent/\"\n\nimport FeedbackIcon from \"@material-ui/icons/Feedback\"\nimport HelpIcon from \"@material-ui/icons/Help\"\nimport AssignmentIcon from \"@material-ui/icons/Assignment\"\nimport LockIcon from \"@material-ui/icons/Lock\"\nimport ReorderIcon from \"@material-ui/icons/Reorder\"\n\nimport { setName, setHelp, setManual, checkPermission } from \"./redux/command/actions\"\nimport { ArgumentType } from \"./redux/command/types\"\nimport { store } from \"./redux\"\nimport { StringArgument } from \"./components/ArgumentComponent/StringArgument\"\nimport { Argument } from \"./components/ArgumentComponent/Argument\"\nimport { NumberArgument } from \"./components/ArgumentComponent/NumberArgument\"\n\ninterface ArgumentCreator {\n  create(parent: DynamicListComponent<any, any>): Argument<any>\n}\n\ntype CommandComponent =\n  TextComponent                   |\n  CodeComponent                   |\n  CheckBoxComponent               |\n  DynamicListComponent<any, any>\n\n\nexport const fields: CommandComponent[] = [\n  new TextComponent({\n    getValue: () => store.getState().command.name,\n    onChange: (field, event) => store.dispatch(setName(event.target.value)),\n    renderCode: (field) => `commander.createCommand(${field.getValue()})\\n`,\n    icon: <FeedbackIcon />,\n    label: \"Command Name\",\n    isValid: field => !(/\\s/).test(field.getValue()),\n  }),\n  new TextComponent({\n    getValue: () => store.getState().command.help,\n    onChange: (field, event) => store.dispatch(setHelp(event.target.value)),\n    renderCode: (field) => `  .setHelp(\"${field.getValue()}\")\\n`,\n    icon: <HelpIcon />,\n    label: \"Help Text\",\n    isValid: field => field.getValue().length > 0,\n  }),\n  new TextComponent({\n    getValue: () => store.getState().command.manual,\n    onChange: (field, event) => store.dispatch(setManual(event.target.value)),\n    multiline: true,\n    displayCode: field => field.getValue().length > 0, \n    renderCode: (field) => `${field.getValue().split(\"\\n\").map(m => `  .setManual(\"${m}\")`).join(\"\\n\")}\\n`,\n    icon: <AssignmentIcon />,\n    label: \"Manual Text\"\n  }),\n  new CheckBoxComponent({\n    icon: <LockIcon />,\n    label: \"check permissions\",\n    displayCode: field => field.getValue(),\n    getValue: () => store.getState().command.checkPerm,\n    onChange: (field, event) => store.dispatch(checkPermission(event.target.checked)),\n    renderCode: field => `  .checkPermissions(client => {\n    //retrieves as first argument the requesting sinusbot client\n    //return either true or false in order to allow the client to use this command\n  })\\n`\n  }),\n  new DynamicListComponent<ArgumentCreator, Argument<any>>({\n    icon: <ReorderIcon />,\n    label: \"Add Argument\",\n    listItems: {\n      \"StringArgument\": StringArgument,\n      \"NumberArgument\": NumberArgument\n    },\n    onSelect: (list, arg) => {\n      list.addElement(arg.create(list))\n    }\n  }),\n  new CodeComponent({\n    renderCode: () => `  .exec((client, args, reply) => {\n    //your logic here\n    //arguments:\n    //  client   -> the client which issued this command\n    //  args     -> all parsed arguments\n    //  reply    -> a function which takes a string as parameter\n    //              it responds to the source where the client has sent a command\n${\n      store.getState().command.argument.length > 0 ?\n      `${store.getState().command.argument.map(arg => {\n        return `    arg.${arg.name} //is a ${ArgumentType[arg.type]}`\n      }).join(\"\\n\")}\\n  )` : \"  )\"\n    }`\n  })\n]","import React, { Component } from \"react\"\nimport { CommandState } from \"../redux/command/types\"\nimport Typography from \"@material-ui/core/Typography\"\n\n\ninterface IProps {\n  command: CommandState\n}\n\n\nexport default class ManPreview extends Component<IProps> {\n\n  argumentUsage() {\n    const { command } = this.props\n    return command.argument.map(arg => {\n      let res = `${arg.display === \"\" ? arg.name : arg.display}`\n      if (arg.displayDefault && arg.default !== undefined)\n        res += `=${arg.default}` \n      res = arg.optional ? `[${res}]` : `<${res}>`\n      return res\n    }).join(\"\")\n  }\n\n  getUsage() {\n    const { command } = this.props\n    return `${command.prefix}${command.name} ${this.argumentUsage()}`\n  }\n\n  render() {\n\n    const { command } = this.props\n\n    return (\n      <>\n      <Typography variant=\"h5\">MAN Command:</Typography>\n      <pre className=\"code\">\n        {`\n        <14:52:43> \"TeamSpeakClient\": !man ${command.name}\n        <14:52:43> \"Sinusbot\": \n        Manual for command: !${command.name}\n        Usage: ${this.getUsage()}\n        ${command.manual||command.help}\n        `}\n        </pre>\n      </>\n    )\n  }\n}","import React, { Component } from \"react\"\nimport { CommandState } from \"../redux/command/types\"\nimport Typography from \"@material-ui/core/Typography\"\n\n\ninterface IProps {\n  command: CommandState\n}\n\n\nexport default class HelpPreview extends Component<IProps> {\n\n  getHelp() {\n    const { command } = this.props\n    return `${command.prefix}${command.name} ${command.help}`\n  }\n\n  render() {\n    return (\n      <>\n      <Typography variant=\"h5\">HELP Command:</Typography>\n      <pre className=\"code\">\n        {`\n        <22:01:09> \"TeamSpeakClient\": !help\n        <22:01:09> \"Sinusbot\": 3 Commands found:\n        <22:01:09> \"Sinusbot\": \n        !help Displays this text\n        !man Displays detailed help about a command if available\n    >>> ${this.getHelp()}\n        `}\n    </pre>\n      </>\n    )\n  }\n}","import React, { Component } from \"react\"\nimport Grid from \"@material-ui/core/Grid\"\nimport Typography from \"@material-ui/core/Typography\"\nimport IconButton from \"@material-ui/core/IconButton\"\nimport { createStyles, withStyles, Theme } from \"@material-ui/core\"\nimport FileCopyIcon from \"@material-ui/icons/FileCopy\"\nimport { AppState } from \"./redux\"\nimport { connect } from \"react-redux\"\n\nimport { fields } from \"./fields\"\nimport { CommandState } from \"./redux/command/types\"\nimport ManPreview from \"./preview/man\"\nimport HelpPreview from \"./preview/help\"\n\nconst styles = ({ spacing }: Theme) => createStyles({\n  content: {\n    flexGrow: 1,\n    padding: spacing(3),\n    minWidth: 0,\n    height: \"100vh\",\n    overflow: \"auto\"\n  },\n  code: {\n    display: \"block\",\n    whiteSpace: \"pre-wrap\"\n  },\n  margin: {\n    margin: spacing(1)\n  }\n})\n\ninterface Styles {\n  classes: {\n    content: string\n    code: string\n    margin: string\n  }\n}\n\n\nclass CommandBuilder extends Component<AppProps & Styles> {\n\n  copyCode = () => {\n    const el = document.createElement(\"textarea\")\n    el.value = this.renderCode()\n    el.setAttribute(\"readonly\", \"\")\n    el.style.position = \"absolute\"\n    el.style.left = \"-9999px\"\n    document.body.appendChild(el)\n    el.select()\n    document.execCommand(\"copy\")\n    document.body.removeChild(el)\n  }\n\n  renderCode = () => {\n    return fields.map(field => field.hasCode && field.displayCode() ? field.renderCode() : \"\").join(\"\")\n  }\n\n  render() {\n    const { classes, command } = this.props\n\n    return (\n      <Grid container className={classes.content}>\n        <Grid item sm={12} md={6} lg={3}>\n          <Typography>Sinusbot Command Builder</Typography>\n\n          <div className={classes.margin}>\n            {fields.map((config, i) => config.hasConfig ? config.renderConfigField(i) : null)}\n          </div>\n\n        </Grid>\n        <Grid item sm={12} md={6} lg={5}>\n          <Typography variant=\"h5\"><IconButton onClick={this.copyCode}><FileCopyIcon /></IconButton> CODE:</Typography>\n          \n          <pre className=\"code\">\n            {this.renderCode()}\n          </pre>\n        </Grid>\n        <Grid item sm={12} md={6} lg={4}>\n          <HelpPreview command={command} />\n          <ManPreview command={command} />\n        </Grid>\n      </Grid>\n    )\n  }\n\n}\n\n\n\ninterface AppProps {\n  command: CommandState\n}\n\nconst mapStateToProps = ({ command }: AppState): AppProps => ({\n  command\n})\n\n\nexport default connect(mapStateToProps)(withStyles(styles)(CommandBuilder))","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport CssBaseline from \"@material-ui/core/CssBaseline\"\nimport { Provider } from \"react-redux\"\nimport App from \"./app\"\nimport * as serviceWorker from \"./serviceWorker\"\nimport { store } from \"./app/redux\"\nimport { MuiThemeProvider, createMuiTheme } from \"@material-ui/core/styles\"\n\nconst theme = createMuiTheme({\n  palette: {\n    type: \"dark\"\n  }\n})\n\nReactDOM.render(\n  <Provider store={store}>\n    <MuiThemeProvider theme={theme}>\n      <CssBaseline />\n      <App />\n    </MuiThemeProvider>\n  </Provider>,\n  document.getElementById(\"root\")\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()"],"sourceRoot":""}